// src/views/CitizensTab.jsx - CORRIGIDO

import React, { useState } from 'react';
import { Users, Briefcase, TrendingUp, Building, AlertCircle } from 'lucide-react';

const CitizensTab = ({ 
  nation, 
  citizenSystem, 
  populationNeeds,
  onUpgradeEducation,
  onApproveExpansion,
  onDestroyBusiness
}) => {
  const [selectedBusiness, setSelectedBusiness] = useState(null);

  if (!citizenSystem || !populationNeeds) {
    return (
      <div className="bg-yellow-50 border-l-4 border-yellow-500 p-6 rounded">
        <div className="flex items-center gap-3">
          <AlertCircle className="text-yellow-600" size={32} />
          <div>
            <h3 className="font-bold text-xl">Sistema de Cidad√£os N√£o Inicializado</h3>
            <p className="text-gray-700 mt-2">
              O sistema de cidad√£os ser√° inicializado automaticamente ao come√ßar um novo jogo.
            </p>
          </div>
        </div>
      </div>
    );
  }

  const statistics = citizenSystem.getStatistics();
  const educationLevels = citizenSystem.getEducationLevels();
  const currentEducation = educationLevels[nation.educationLevel];
  const products = citizenSystem.getAgriculturalProducts();

  // Agrupar neg√≥cios por produto
  const businessesByProduct = {};
  citizenSystem.autonomousBusinesses.forEach(business => {
    if (!businessesByProduct[business.product]) {
      businessesByProduct[business.product] = [];
    }
    businessesByProduct[business.product].push(business);
  });

  // Calcular produ√ß√£o aut√¥noma para o relat√≥rio
  const autonomousProduction = {};
  citizenSystem.autonomousBusinesses.forEach(b => {
    autonomousProduction[b.product] = (autonomousProduction[b.product] || 0) + b.production;
  });

  // Calcular relat√≥rio de satisfa√ß√£o
  const satisfactionReport = populationNeeds.generateReport(
    nation.population,
    nation.resources || {},
    autonomousProduction,
    nation.educationLevel,
    nation.economicStatus
  );

  return (
    <div className="space-y-6">
      {/* Header: N√≠vel de Educa√ß√£o */}
      <div className="bg-gradient-to-r from-indigo-600 to-purple-600 text-white p-6 rounded-lg shadow-lg">
        <div className="flex justify-between items-start">
          <div>
            <h2 className="text-3xl font-bold mb-2">üéì Sistema de Cidad√£os Aut√¥nomos</h2>
            <p className="text-indigo-100 mb-4">
              Cidad√£os educados criam seus pr√≥prios neg√≥cios e ajudam a economia crescer
            </p>
            
            <div className="bg-white/20 backdrop-blur-sm p-4 rounded-lg">
              <p className="text-sm mb-2">N√≠vel de Educa√ß√£o Atual:</p>
              <p className="text-2xl font-bold">{
                nation.educationLevel === 'none' ? 'Nenhum' :
                nation.educationLevel === 'basic' ? 'B√°sico' :
                nation.educationLevel === 'intermediate' ? 'Intermedi√°rio' :
                nation.educationLevel === 'advanced' ? 'Avan√ßado' : 'Superior'
              }</p>
              
              {currentEducation.canStartBusiness && (
                <div className="mt-3 text-sm">
                  <p>‚úì Cidad√£os podem criar neg√≥cios {currentEducation.businessSize}</p>
                  <p>‚úì Capacidade m√°xima: {currentEducation.employeeCapacity} funcion√°rios</p>
                </div>
              )}
            </div>
          </div>

          {nation.educationLevel !== 'superior' && (
            <button
              onClick={onUpgradeEducation}
              className="bg-white text-indigo-600 px-6 py-3 rounded-lg font-bold hover:bg-indigo-50 transition"
            >
              üìö Melhorar Educa√ß√£o
            </button>
          )}
        </div>
      </div>

      {/* Estat√≠sticas Gerais */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        <div className="bg-white p-6 rounded-lg shadow">
          <div className="flex items-center justify-between mb-2">
            <span className="text-gray-600">Cidad√£os Empreendedores</span>
            <Users className="text-blue-500" size={24} />
          </div>
          <p className="text-3xl font-bold text-blue-600">{statistics.totalCitizens}</p>
        </div>

        <div className="bg-white p-6 rounded-lg shadow">
          <div className="flex items-center justify-between mb-2">
            <span className="text-gray-600">Neg√≥cios Ativos</span>
            <Building className="text-green-500" size={24} />
          </div>
          <p className="text-3xl font-bold text-green-600">{statistics.totalBusinesses}</p>
        </div>

        <div className="bg-white p-6 rounded-lg shadow">
          <div className="flex items-center justify-between mb-2">
            <span className="text-gray-600">Empregos Criados</span>
            <Briefcase className="text-purple-500" size={24} />
          </div>
          <p className="text-3xl font-bold text-purple-600">{statistics.totalJobs.toLocaleString()}</p>
        </div>

        <div className="bg-white p-6 rounded-lg shadow">
          <div className="flex items-center justify-between mb-2">
            <span className="text-gray-600">Produ√ß√£o Total</span>
            <TrendingUp className="text-orange-500" size={24} />
          </div>
          <p className="text-3xl font-bold text-orange-600">{statistics.totalProduction.toLocaleString()}</p>
        </div>
      </div>

      {/* Satisfa√ß√£o da Popula√ß√£o */}
      <div className="bg-white p-6 rounded-lg shadow">
        <h3 className="text-2xl font-bold mb-4">üòä Satisfa√ß√£o da Popula√ß√£o</h3>
        
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
          {Object.entries(satisfactionReport.satisfaction)
            .filter(([key]) => ['critical', 'important', 'comfort', 'health'].includes(key))
            .map(([category, data]) => {
              const labels = {
                critical: { name: 'Cr√≠ticos', icon: 'üíÄ', color: 'red' },
                important: { name: 'Importantes', icon: '‚ö†Ô∏è', color: 'orange' },
                comfort: { name: 'Conforto', icon: 'üòä', color: 'yellow' },
                health: { name: 'Sa√∫de', icon: 'üíä', color: 'blue' }
              };
              const label = labels[category];

              return (
                <div key={category} className="bg-gray-50 p-4 rounded-lg border-2 border-gray-300">
                  <div className="flex items-center gap-2 mb-2">
                    <span className="text-2xl">{label.icon}</span>
                    <span className="font-bold">{label.name}</span>
                  </div>
                  <p className="text-3xl font-bold text-gray-700">
                    {data.percentage.toFixed(0)}%
                  </p>
                  <div className="w-full bg-gray-200 rounded-full h-2 mt-2">
                    <div
                      className="bg-blue-600 h-2 rounded-full transition-all"
                      style={{ width: `${data.percentage}%` }}
                    />
                  </div>
                </div>
              );
            })}
        </div>

        <div className={`p-6 rounded-lg border-2 ${
          satisfactionReport.satisfaction.overallSatisfaction >= 80 ? 'bg-green-50 border-green-500' :
          satisfactionReport.satisfaction.overallSatisfaction >= 60 ? 'bg-blue-50 border-blue-500' :
          satisfactionReport.satisfaction.overallSatisfaction >= 40 ? 'bg-yellow-50 border-yellow-500' :
          'bg-red-50 border-red-500'
        }`}>
          <h4 className="text-xl font-bold mb-2">Satisfa√ß√£o Geral</h4>
          <p className="text-4xl font-bold mb-2">
            {satisfactionReport.satisfaction.overallSatisfaction}%
          </p>
          <div className="w-full bg-gray-200 rounded-full h-4 mb-4">
            <div
              className={`h-4 rounded-full transition-all ${
                satisfactionReport.satisfaction.overallSatisfaction >= 80 ? 'bg-green-600' :
                satisfactionReport.satisfaction.overallSatisfaction >= 60 ? 'bg-blue-600' :
                satisfactionReport.satisfaction.overallSatisfaction >= 40 ? 'bg-yellow-600' :
                'bg-red-600'
              }`}
              style={{ width: `${satisfactionReport.satisfaction.overallSatisfaction}%` }}
            />
          </div>
          
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm">
            <div>
              <p className="text-gray-600">Produtividade:</p>
              <p className="font-bold">{(satisfactionReport.effects.productivity * 100).toFixed(0)}%</p>
            </div>
            <div>
              <p className="text-gray-600">Arrecada√ß√£o:</p>
              <p className="font-bold">{(satisfactionReport.effects.taxCompliance * 100).toFixed(0)}%</p>
            </div>
            <div>
              <p className="text-gray-600">Crescimento:</p>
              <p className="font-bold">{(satisfactionReport.effects.growth * 100).toFixed(0)}%</p>
            </div>
          </div>
        </div>

        {/* Alertas Cr√≠ticos */}
        {satisfactionReport.satisfaction.criticalShortages.length > 0 && (
          <div className="mt-4 bg-red-50 border-2 border-red-500 p-4 rounded-lg">
            <h4 className="font-bold text-red-800 mb-2">üö® Escassez Cr√≠tica!</h4>
            <ul className="space-y-1">
              {satisfactionReport.satisfaction.criticalShortages.map((shortage, idx) => (
                <li key={idx} className="text-red-700">
                  ‚Ä¢ <strong>{populationNeeds.getResourceInfo(shortage.item).name}</strong>: 
                  D√©ficit de {shortage.deficit} unidades ({shortage.fulfillment} atendido)
                </li>
              ))}
            </ul>
          </div>
        )}

        {/* Recomenda√ß√µes */}
        {satisfactionReport.recommendations.length > 0 && (
          <div className="mt-4 bg-blue-50 border-2 border-blue-500 p-4 rounded-lg">
            <h4 className="font-bold text-blue-800 mb-2">üí° Recomenda√ß√µes</h4>
            <ul className="space-y-2">
              {satisfactionReport.recommendations.slice(0, 5).map((rec, idx) => (
                <li key={idx} className="text-blue-700 text-sm">
                  <span className={`font-bold ${
                    rec.priority === 'URGENTE' ? 'text-red-600' :
                    rec.priority === 'ALTA' ? 'text-orange-600' :
                    rec.priority === 'M√âDIA' ? 'text-yellow-600' :
                    'text-blue-600'
                  }`}>[{rec.priority}]</span> {rec.message}
                </li>
              ))}
            </ul>
          </div>
        )}
      </div>

      {/* Neg√≥cios por Produto */}
      {Object.keys(businessesByProduct).length > 0 ? (
        <div className="bg-white p-6 rounded-lg shadow">
          <h3 className="text-2xl font-bold mb-4">üåæ Neg√≥cios Aut√¥nomos por Produto</h3>
          
          <div className="space-y-4">
            {Object.entries(businessesByProduct).map(([product, businesses]) => {
              const productInfo = products[product];
              const totalProduction = businesses.reduce((sum, b) => sum + b.production, 0);
              const totalEmployees = businesses.reduce((sum, b) => sum + b.employees, 0);
              const totalTax = businesses.reduce((sum, b) => sum + b.monthlyTax, 0);

              return (
                <div key={product} className="bg-gradient-to-r from-green-50 to-emerald-50 p-4 rounded-lg border-2 border-green-300">
                  <div className="flex justify-between items-start mb-3">
                    <div className="flex items-center gap-3">
                      <span className="text-4xl">{productInfo.icon}</span>
                      <div>
                        <h4 className="font-bold text-xl">{productInfo.name}</h4>
                        <p className="text-sm text-gray-600">{businesses.length} neg√≥cio(s) ativo(s)</p>
                      </div>
                    </div>
                    <div className="text-right">
                      <p className="text-sm text-gray-600">Produ√ß√£o Total</p>
                      <p className="text-2xl font-bold text-green-600">{totalProduction.toLocaleString()}</p>
                    </div>
                  </div>

                  <div className="grid grid-cols-3 gap-3 mb-3">
                    <div className="bg-white p-3 rounded">
                      <p className="text-xs text-gray-600">Empregos</p>
                      <p className="text-lg font-bold text-blue-600">{totalEmployees}</p>
                    </div>
                    <div className="bg-white p-3 rounded">
                      <p className="text-xs text-gray-600">Impostos/M√™s</p>
                      <p className="text-lg font-bold text-green-600">R$ {totalTax.toLocaleString()}</p>
                    </div>
                    <div className="bg-white p-3 rounded">
                      <p className="text-xs text-gray-600">Pre√ßo Base</p>
                      <p className="text-lg font-bold text-purple-600">R$ {productInfo.basePrice}</p>
                    </div>
                  </div>

                  {/* Lista de Neg√≥cios */}
                  <div className="space-y-2">
                    {businesses.map(business => {
                      const owner = citizenSystem.citizens.find(c => c.id === business.ownerId);
                      const expansion = business.expandable ? 
                        citizenSystem.checkBusinessExpansion(business, nation) : null;

                      return (
                        <div key={business.id} className="bg-white p-3 rounded border-l-4 border-green-500">
                          <div className="flex justify-between items-start mb-2">
                            <div>
                              <p className="font-bold">{business.name}</p>
                              <p className="text-sm text-gray-600">
                                Propriet√°rio: {owner?.name || 'Desconhecido'} | 
                                Tamanho: {business.size} | 
                                {business.monthsActive} meses ativo
                              </p>
                            </div>
                            <div className="flex gap-2">
                              {expansion && (
                                <button
                                  onClick={() => onApproveExpansion(business.id)}
                                  className="bg-blue-600 text-white px-3 py-1 rounded text-sm hover:bg-blue-700 transition"
                                >
                                  üöÄ Expandir
                                </button>
                              )}
                              <button
                                onClick={() => {
                                  if (confirm(`Tem certeza que deseja destruir ${business.name}? ${business.employees} empregos ser√£o perdidos.`)) {
                                    onDestroyBusiness(business.id);
                                  }
                                }}
                                className="bg-red-600 text-white px-3 py-1 rounded text-sm hover:bg-red-700 transition"
                              >
                                üóëÔ∏è Destruir
                              </button>
                            </div>
                          </div>

                          <div className="grid grid-cols-4 gap-2 text-sm">
                            <div>
                              <p className="text-gray-600">Funcion√°rios:</p>
                              <p className="font-bold">{business.employees}</p>
                            </div>
                            <div>
                              <p className="text-gray-600">Produ√ß√£o:</p>
                              <p className="font-bold">{business.production}</p>
                            </div>
                            <div>
                              <p className="text-gray-600">Impostos:</p>
                              <p className="font-bold text-green-600">R$ {business.monthlyTax.toLocaleString()}</p>
                            </div>
                            <div>
                              <p className="text-gray-600">Lucro Dono:</p>
                              <p className="font-bold text-blue-600">R$ {business.monthlyProfit.toLocaleString()}</p>
                            </div>
                          </div>

                          {expansion && (
                            <div className="mt-2 pt-2 border-t bg-blue-50 p-2 rounded">
                              <p className="text-sm font-bold text-blue-800 mb-1">
                                üöÄ Oportunidade de Expans√£o Dispon√≠vel!
                              </p>
                              <div className="grid grid-cols-2 gap-2 text-xs">
                                <div>
                                  <p className="text-gray-600">Novo tamanho: <strong>{expansion.nextSize}</strong></p>
                                  <p className="text-gray-600">+{expansion.benefits.additionalEmployees} empregos</p>
                                  <p className="text-gray-600">+{expansion.benefits.additionalProduction} produ√ß√£o</p>
                                </div>
                                <div>
                                  <p className="text-gray-600">Custos:</p>
                                  <p className="text-gray-600">{expansion.costs.land} terra</p>
                                  <p className="text-gray-600">{expansion.costs.water} √°gua</p>
                                  <p className="text-gray-600">R$ {expansion.costs.money.toLocaleString()}</p>
                                </div>
                              </div>
                            </div>
                          )}
                        </div>
                      );
                    })}
                  </div>
                </div>
              );
            })}
          </div>
        </div>
      ) : (
        <div className="bg-white p-6 rounded-lg shadow text-center">
          <div className="text-6xl mb-4">üå±</div>
          <h3 className="text-xl font-bold mb-2">Nenhum Neg√≥cio Aut√¥nomo Ainda</h3>
          <p className="text-gray-600 mb-4">
            {nation.educationLevel === 'none' 
              ? 'Melhore a educa√ß√£o para permitir que cidad√£os criem seus pr√≥prios neg√≥cios.'
              : 'Cidad√£os come√ßar√£o a criar neg√≥cios automaticamente quando houver demanda n√£o atendida pelo governo (15% de chance por m√™s).'
            }
          </p>
          <div className="bg-blue-50 border-l-4 border-blue-500 p-4 text-left max-w-2xl mx-auto">
            <p className="text-sm font-bold text-gray-700 mb-2">üìä Condi√ß√µes para criar neg√≥cios:</p>
            <ul className="text-sm text-gray-700 space-y-1">
              <li>‚úì N√≠vel de educa√ß√£o: {nation.educationLevel !== 'none' ? '‚úÖ OK' : '‚ùå Necess√°rio'}</li>
              <li>‚úì Terra dispon√≠vel: {(nation.resources?.land || 0).toLocaleString()} unidades</li>
              <li>‚úì √Ågua dispon√≠vel: {(nation.resources?.water || 0).toLocaleString()} unidades</li>
              <li>‚úì D√©ficit de recursos: Verifique na aba Recursos</li>
              <li>‚úì Chance por turno: 15%</li>
            </ul>
          </div>
        </div>
      )}

      {/* Dicas */}
      <div className="bg-indigo-50 border-l-4 border-indigo-500 p-6 rounded">
        <h3 className="font-bold text-lg mb-2">üí° Como Funciona o Sistema de Cidad√£os</h3>
        <ul className="space-y-2 text-sm text-gray-700">
          <li>‚Ä¢ <strong>Educa√ß√£o B√°sica:</strong> Cidad√£os podem criar pequenas planta√ß√µes (2-5 funcion√°rios, 30-80 produ√ß√£o)</li>
          <li>‚Ä¢ <strong>Educa√ß√£o Intermedi√°ria:</strong> Neg√≥cios m√©dios (5-13 funcion√°rios, 80-180 produ√ß√£o)</li>
          <li>‚Ä¢ <strong>Educa√ß√£o Avan√ßada:</strong> Grandes fazendas (15-40 funcion√°rios, 180-380 produ√ß√£o)</li>
          <li>‚Ä¢ <strong>Educa√ß√£o Superior:</strong> Agroneg√≥cio corporativo (50-130 funcion√°rios, 380-780 produ√ß√£o)</li>
          <li>‚Ä¢ <strong>Cria√ß√£o Autom√°tica:</strong> 15% de chance por m√™s quando h√° demanda n√£o atendida</li>
          <li>‚Ä¢ <strong>Expans√£o:</strong> Ap√≥s 6 meses, neg√≥cios podem expandir se o propriet√°rio tiver educa√ß√£o suficiente</li>
          <li>‚Ä¢ <strong>Benef√≠cios:</strong> Gera empregos, paga impostos (15% da receita) e atende necessidades da popula√ß√£o</li>
          <li>‚Ä¢ <strong>Recursos:</strong> Cidad√£os usam terra e √°gua, governo subsidia 50% do custo</li>
          <li>‚Ä¢ <strong>Destrui√ß√£o:</strong> Voc√™ pode destruir neg√≥cios, mas perder√° empregos e receita de impostos</li>
        </ul>
      </div>
    </div>
  );
};

export default CitizensTab;